//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 31 16:04:04 GFT 2018
//----------------------------------------------------

package br.com.uece.compilador.compiladorweb.parser;

import br.com.uece.compilador.compiladorweb.ast.*;

import java.util.Stack;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Thu May 31 16:04:04 GFT 2018
 */
public class parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\066\000\002\002\004\000\002\002\004\000\002\010" +
                            "\004\000\002\010\002\000\002\003\023\000\002\021\010" +
                            "\000\002\021\012\000\002\022\002\000\002\022\004\000" +
                            "\002\006\002\000\002\006\004\000\002\005\015\000\002" +
                            "\007\006\000\002\007\011\000\002\007\007\000\002\007" +
                            "\011\000\002\007\007\000\002\007\005\000\002\024\003" +
                            "\000\002\004\003\000\002\004\005\000\002\004\005\000" +
                            "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
                            "\004\005\000\002\004\004\000\002\004\003\000\002\004" +
                            "\003\000\002\004\003\000\002\004\006\000\002\004\003" +
                            "\000\002\004\003\000\002\004\007\000\002\004\006\000" +
                            "\002\004\003\000\002\012\005\000\002\011\006\000\002" +
                            "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
                            "\005\000\002\015\005\000\002\016\002\000\002\016\004" +
                            "\000\002\023\004\000\002\014\004\000\002\014\005\000" +
                            "\002\013\005\000\002\013\003\000\002\017\004\000\002" +
                            "\017\005\000\002\020\003\000\002\020\005"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\221\000\004\022\006\001\002\000\004\002\223\001" +
                            "\002\000\006\002\ufffa\022\146\001\002\000\004\037\007" +
                            "\001\002\000\024\023\uffef\027\uffef\031\uffef\032\uffef\033" +
                            "\uffef\035\uffef\037\uffef\045\uffef\050\uffef\001\002\000\004" +
                            "\033\011\001\002\000\004\012\012\001\002\000\004\013" +
                            "\013\001\002\000\004\014\014\001\002\000\004\015\015" +
                            "\001\002\000\004\031\016\001\002\000\004\005\017\001" +
                            "\002\000\004\027\020\001\002\000\004\030\021\001\002" +
                            "\000\004\037\007\001\002\000\004\032\023\001\002\000" +
                            "\004\033\024\001\002\000\014\016\031\020\030\026\027" +
                            "\033\025\037\007\001\002\000\016\016\031\020\030\026" +
                            "\027\033\025\034\ufffe\037\007\001\002\000\004\034\136" +
                            "\001\002\000\004\031\132\001\002\000\004\031\126\001" +
                            "\002\000\004\031\120\001\002\000\006\027\034\045\033" +
                            "\001\002\000\022\007\036\010\040\011\041\024\035\031" +
                            "\046\036\047\037\042\046\043\001\002\000\022\007\036" +
                            "\010\040\011\041\024\035\031\046\036\047\037\042\046" +
                            "\043\001\002\000\006\004\107\037\007\001\002\000\030" +
                            "\027\uffe6\030\uffe6\032\uffe6\035\uffe6\040\uffe6\041\uffe6\042" +
                            "\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\001\002\000\022" +
                            "\027\057\030\103\040\054\041\055\042\056\043\053\044" +
                            "\051\047\060\001\002\000\030\027\uffe5\030\uffe5\032\uffe5" +
                            "\035\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\047" +
                            "\uffe5\050\uffe5\001\002\000\030\027\uffe4\030\uffe4\032\uffe4" +
                            "\035\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047" +
                            "\uffe4\050\uffe4\001\002\000\030\027\uffee\030\uffee\032\uffee" +
                            "\035\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047" +
                            "\uffee\050\uffee\001\002\000\022\007\036\010\040\011\041" +
                            "\024\035\031\046\036\047\037\042\046\043\001\002\000" +
                            "\030\027\uffe2\030\uffe2\032\uffe2\035\uffe2\040\uffe2\041\uffe2" +
                            "\042\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2\001\002\000" +
                            "\030\027\uffe1\030\uffe1\032\uffe1\035\uffe1\040\uffe1\041\uffe1" +
                            "\042\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1\001\002\000" +
                            "\022\007\036\010\040\011\041\024\035\031\046\036\047" +
                            "\037\042\046\043\001\002\000\030\027\uffde\030\uffde\032" +
                            "\uffde\035\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
                            "\047\uffde\050\uffde\001\002\000\022\027\057\032\052\040" +
                            "\054\041\055\042\056\043\053\044\051\047\060\001\002" +
                            "\000\022\007\036\010\040\011\041\024\035\031\046\036" +
                            "\047\037\042\046\043\001\002\000\030\027\uffe8\030\uffe8" +
                            "\032\uffe8\035\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
                            "\uffe8\047\uffe8\050\uffe8\001\002\000\022\007\036\010\040" +
                            "\011\041\024\035\031\046\036\047\037\042\046\043\001" +
                            "\002\000\022\007\036\010\040\011\041\024\035\031\046" +
                            "\036\047\037\042\046\043\001\002\000\022\007\036\010" +
                            "\040\011\041\024\035\031\046\036\047\037\042\046\043" +
                            "\001\002\000\022\007\036\010\040\011\041\024\035\031" +
                            "\046\036\047\037\042\046\043\001\002\000\022\007\036" +
                            "\010\040\011\041\024\035\031\046\036\047\037\042\046" +
                            "\043\001\002\000\006\025\061\037\007\001\002\000\030" +
                            "\027\uffdd\030\uffdd\032\uffdd\035\uffdd\040\uffdd\041\uffdd\042" +
                            "\uffdd\043\uffdd\044\uffdd\047\uffdd\050\uffdd\001\002\000\004" +
                            "\031\063\001\002\000\024\007\036\010\040\011\041\024" +
                            "\035\031\046\032\067\036\047\037\042\046\043\001\002" +
                            "\000\030\027\uffdf\030\uffdf\032\uffdf\035\uffdf\040\uffdf\041" +
                            "\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\001\002" +
                            "\000\004\032\072\001\002\000\024\027\057\032\uffcd\040" +
                            "\054\041\055\042\056\043\053\044\051\047\060\050\070" +
                            "\001\002\000\030\027\uffcf\030\uffcf\032\uffcf\035\uffcf\040" +
                            "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047\uffcf\050\uffcf" +
                            "\001\002\000\022\007\036\010\040\011\041\024\035\031" +
                            "\046\036\047\037\042\046\043\001\002\000\004\032\uffcc" +
                            "\001\002\000\030\027\uffce\030\uffce\032\uffce\035\uffce\040" +
                            "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\047\uffce\050\uffce" +
                            "\001\002\000\022\027\057\030\074\040\054\041\055\042" +
                            "\056\043\053\044\051\047\060\001\002\000\030\027\uffdc" +
                            "\030\uffdc\032\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
                            "\uffdc\044\uffdc\047\uffdc\050\uffdc\001\002\000\030\027\uffeb" +
                            "\030\uffeb\032\uffeb\035\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
                            "\uffeb\044\uffeb\047\uffeb\050\uffeb\001\002\000\030\027\uffec" +
                            "\030\uffec\032\uffec\035\uffec\040\uffec\041\uffec\042\056\043" +
                            "\053\044\051\047\060\050\uffec\001\002\000\030\027\uffed" +
                            "\030\uffed\032\uffed\035\uffed\040\uffed\041\uffed\042\056\043" +
                            "\053\044\051\047\060\050\uffed\001\002\000\026\027\uffe9" +
                            "\030\uffe9\032\uffe9\035\uffe9\040\uffe9\041\uffe9\042\056\044" +
                            "\051\047\060\050\uffe9\001\002\000\030\027\uffea\030\uffea" +
                            "\032\uffea\035\uffea\040\uffea\041\uffea\042\056\043\uffea\044" +
                            "\uffea\047\060\050\uffea\001\002\000\030\027\uffe7\030\uffe7" +
                            "\032\uffe7\035\uffe7\040\uffe7\041\uffe7\042\056\043\uffe7\044" +
                            "\uffe7\047\060\050\uffe7\001\002\000\004\045\104\001\002" +
                            "\000\022\007\036\010\040\011\041\024\035\031\046\036" +
                            "\047\037\042\046\043\001\002\000\022\027\057\035\106" +
                            "\040\054\041\055\042\056\043\053\044\051\047\060\001" +
                            "\002\000\022\016\ufff2\017\ufff2\020\ufff2\021\ufff2\026\ufff2" +
                            "\033\ufff2\034\ufff2\037\ufff2\001\002\000\004\027\113\001" +
                            "\002\000\004\031\111\001\002\000\004\032\112\001\002" +
                            "\000\030\027\uffe3\030\uffe3\032\uffe3\035\uffe3\040\uffe3\041" +
                            "\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3\001\002" +
                            "\000\022\007\036\010\040\011\041\024\035\031\046\036" +
                            "\047\037\042\046\043\001\002\000\022\027\057\030\115" +
                            "\040\054\041\055\042\056\043\053\044\051\047\060\001" +
                            "\002\000\030\027\uffe0\030\uffe0\032\uffe0\035\uffe0\040\uffe0" +
                            "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0\050\uffe0\001" +
                            "\002\000\022\027\057\035\117\040\054\041\055\042\056" +
                            "\043\053\044\051\047\060\001\002\000\022\016\ufff5\017" +
                            "\ufff5\020\ufff5\021\ufff5\026\ufff5\033\ufff5\034\ufff5\037\ufff5" +
                            "\001\002\000\022\007\036\010\040\011\041\024\035\031" +
                            "\046\036\047\037\042\046\043\001\002\000\022\027\057" +
                            "\032\122\040\054\041\055\042\056\043\053\044\051\047" +
                            "\060\001\002\000\014\016\031\020\030\026\027\033\025" +
                            "\037\007\001\002\000\004\017\124\001\002\000\014\016" +
                            "\031\020\030\026\027\033\025\037\007\001\002\000\022" +
                            "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\026\ufff4\033\ufff4\034" +
                            "\ufff4\037\ufff4\001\002\000\022\007\036\010\040\011\041" +
                            "\024\035\031\046\036\047\037\042\046\043\001\002\000" +
                            "\022\027\057\032\130\040\054\041\055\042\056\043\053" +
                            "\044\051\047\060\001\002\000\014\016\031\020\030\026" +
                            "\027\033\025\037\007\001\002\000\022\016\ufff1\017\ufff1" +
                            "\020\ufff1\021\ufff1\026\ufff1\033\ufff1\034\ufff1\037\ufff1\001" +
                            "\002\000\022\007\036\010\040\011\041\024\035\031\046" +
                            "\036\047\037\042\046\043\001\002\000\022\027\057\032" +
                            "\134\040\054\041\055\042\056\043\053\044\051\047\060" +
                            "\001\002\000\004\035\135\001\002\000\022\016\ufff3\017" +
                            "\ufff3\020\ufff3\021\ufff3\026\ufff3\033\ufff3\034\ufff3\037\ufff3" +
                            "\001\002\000\004\034\137\001\002\000\006\002\ufffd\022" +
                            "\ufffd\001\002\000\020\016\031\020\030\021\ufffe\026\027" +
                            "\033\025\034\ufffe\037\007\001\002\000\004\034\142\001" +
                            "\002\000\022\016\ufff0\017\ufff0\020\ufff0\021\ufff0\026\ufff0" +
                            "\033\ufff0\034\ufff0\037\ufff0\001\002\000\006\021\uffff\034" +
                            "\uffff\001\002\000\004\002\001\001\002\000\006\002\ufffa" +
                            "\022\146\001\002\000\004\037\007\001\002\000\006\023" +
                            "\151\033\150\001\002\000\014\004\uffd6\006\uffd6\012\uffd6" +
                            "\034\uffd6\037\uffd6\001\002\000\004\037\007\001\002\000" +
                            "\004\033\153\001\002\000\014\004\uffd6\006\uffd6\012\uffd6" +
                            "\034\uffd6\037\uffd6\001\002\000\014\004\163\006\156\012" +
                            "\157\034\ufff8\037\007\001\002\000\004\037\007\001\002" +
                            "\000\004\037\uffda\001\002\000\010\004\163\006\156\037" +
                            "\007\001\002\000\006\012\157\034\ufff8\001\002\000\026" +
                            "\004\uffd5\006\uffd5\012\uffd5\016\uffd5\020\uffd5\021\uffd5\026" +
                            "\uffd5\033\uffd5\034\uffd5\037\uffd5\001\002\000\004\037\uffd9" +
                            "\001\002\000\006\027\166\037\uffdb\001\002\000\004\034" +
                            "\165\001\002\000\006\002\ufffb\022\ufffb\001\002\000\004" +
                            "\030\167\001\002\000\004\037\uffd8\001\002\000\004\034" +
                            "\ufff7\001\002\000\004\037\007\001\002\000\004\031\174" +
                            "\001\002\000\004\033\205\001\002\000\012\004\163\006" +
                            "\156\032\175\037\007\001\002\000\004\033\uffd3\001\002" +
                            "\000\004\032\204\001\002\000\004\037\007\001\002\000" +
                            "\006\032\uffd0\050\201\001\002\000\010\004\163\006\156" +
                            "\037\007\001\002\000\004\032\uffd1\001\002\000\006\032" +
                            "\uffd4\050\uffd4\001\002\000\004\033\uffd2\001\002\000\022" +
                            "\004\uffd6\006\uffd6\016\uffd6\020\uffd6\021\uffd6\026\uffd6\033" +
                            "\uffd6\037\uffd6\001\002\000\022\004\163\006\156\016\031" +
                            "\020\030\021\ufffe\026\027\033\025\037\007\001\002\000" +
                            "\004\021\211\001\002\000\010\027\034\037\uffd9\045\033" +
                            "\001\002\000\022\007\036\010\040\011\041\024\035\031" +
                            "\046\036\047\037\042\046\043\001\002\000\022\027\057" +
                            "\035\213\040\054\041\055\042\056\043\053\044\051\047" +
                            "\060\001\002\000\004\034\214\001\002\000\006\012\ufff6" +
                            "\034\ufff6\001\002\000\004\035\216\001\002\000\026\004" +
                            "\uffd7\006\uffd7\012\uffd7\016\uffd7\020\uffd7\021\uffd7\026\uffd7" +
                            "\033\uffd7\034\uffd7\037\uffd7\001\002\000\014\004\163\006" +
                            "\156\012\157\034\ufff8\037\007\001\002\000\004\034\221" +
                            "\001\002\000\006\002\ufffc\022\ufffc\001\002\000\004\002" +
                            "\ufff9\001\002\000\004\002\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\221\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\006\021\144\022\143\001\001\000\004\024\007" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\024\021\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\007\025\024\031\001\001\000" +
                            "\010\007\137\010\140\024\031\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\010\004\115\011\044\012\043\001\001" +
                            "\000\010\004\036\011\044\012\043\001\001\000\004\024" +
                            "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
                            "\101\011\044\012\043\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\004\047\011\044\012\043\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\004\100\011\044" +
                            "\012\043\001\001\000\002\001\001\000\010\004\077\011" +
                            "\044\012\043\001\001\000\010\004\076\011\044\012\043" +
                            "\001\001\000\010\004\075\011\044\012\043\001\001\000" +
                            "\010\004\074\011\044\012\043\001\001\000\010\004\072" +
                            "\011\044\012\043\001\001\000\004\024\061\001\001\000" +
                            "\002\001\001\000\004\017\063\001\001\000\012\004\065" +
                            "\011\044\012\043\020\064\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\004\065\011\044\012\043\020\070\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\004\104\011\044\012\043\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
                            "\113\011\044\012\043\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
                            "\120\011\044\012\043\001\001\000\002\001\001\000\006" +
                            "\007\122\024\031\001\001\000\002\001\001\000\006\007" +
                            "\124\024\031\001\001\000\002\001\001\000\010\004\126" +
                            "\011\044\012\043\001\001\000\002\001\001\000\006\007" +
                            "\130\024\031\001\001\000\002\001\001\000\010\004\132" +
                            "\011\044\012\043\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\007\137\010\142\024\031\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\021\144\022\221\001\001\000\004\024\146\001" +
                            "\001\000\002\001\001\000\004\016\216\001\001\000\004" +
                            "\024\151\001\001\000\002\001\001\000\004\016\153\001" +
                            "\001\000\014\005\157\006\163\015\160\024\161\025\154" +
                            "\001\001\000\004\024\214\001\001\000\002\001\001\000" +
                            "\006\024\161\025\170\001\001\000\006\005\157\006\167" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\024\171\001" +
                            "\001\000\004\014\172\001\001\000\002\001\001\000\012" +
                            "\013\175\023\177\024\161\025\176\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\024\202\001\001\000\002" +
                            "\001\001\000\012\013\201\023\177\024\161\025\176\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\016\205\001\001\000\014\007\137\010\206\015" +
                            "\160\024\207\025\154\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\004\211\011\044\012\043\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\014\005\157\006\217\015" +
                            "\160\024\161\025\154\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            Stack stack,
            int top)
            throws Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {
    private final parser parser;

    /**
     * Constructor
     */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            Stack CUP$parser$stack,
            int CUP$parser$top)
            throws Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // ExpressionList ::= Expression COMMA ExpressionList
            {
                ExpList RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ExpList l = (ExpList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                RESULT.addElement(e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // ExpressionList ::= Expression
            {
                ExpList RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new ExpList(eleft);
                RESULT.addElement(e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // MethodInvocationParameterList ::= LPAREN ExpressionList RPAREN
            {
                ExpList RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Object l = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ExpList e = (ExpList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = e;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInvocationParameterList", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // MethodInvocationParameterList ::= LPAREN RPAREN
            {
                ExpList RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object l = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new ExpList(lleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInvocationParameterList", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // FormalParameterList ::= FormalParameter
            {
                FormalList RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Formal p = (Formal) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new FormalList(pleft);
                RESULT.addElement(p);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // FormalParameterList ::= FormalParameter COMMA FormalParameterList
            {
                FormalList RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Formal p = (Formal) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                FormalList l = (FormalList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                l.addElement(p);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // FormalParameterListAndParens ::= LPAREN FormalParameterList RPAREN
            {
                FormalList RESULT = null;
                int paramsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int paramsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                FormalList params = (FormalList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = params;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // FormalParameterListAndParens ::= LPAREN RPAREN
            {
                FormalList RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object l = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new FormalList(lleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // FormalParameter ::= Type Identifier
            {
                Formal RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Formal(t, i, tleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // VarDeclarationList ::= VarDeclarationList VarDeclaration
            {
                VarDeclList RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                VarDeclList l = (VarDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                VarDecl e = (VarDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                l.addElement(e);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // VarDeclarationList ::=
            {
                VarDeclList RESULT = null;
                RESULT = new VarDeclList(0);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // VarDeclaration ::= Type Identifier SEMICOLON
            {
                VarDecl RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new VarDecl(t, i, tleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // Type ::= INTEGER_TYPE LBRACKET RBRACKET
            {
                Type RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new IntArrayType(ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Type", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // Type ::= Identifier
            {
                Type RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new IdentifierType(i.s, ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Type", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // Type ::= BOOLEAN_TYPE
            {
                Type RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Object b = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new BooleanType(bleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Type", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // Type ::= INTEGER_TYPE
            {
                Type RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new IntegerType(ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Type", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ArrayLookup ::= Expression LBRACKET Expression RBRACKET
            {
                ArrayLookup RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Exp i = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new ArrayLookup(e, i, eleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayLookup", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ArrayLength ::= Expression DOT LENGTH
            {
                ArrayLength RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new ArrayLength(e, eleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayLength", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Expression ::= INTEGER_LITERAL
            {
                Exp RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new IntegerLiteral(i.intValue(), ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Expression ::= Expression DOT Identifier MethodInvocationParameterList
            {
                Exp RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ExpList l = (ExpList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Call(e, id, l, eleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // Expression ::= NEW INTEGER_TYPE LBRACKET Expression RBRACKET
            {
                Exp RESULT = null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new NewArray(e, nleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // Expression ::= ArrayLookup
            {
                Exp RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ArrayLookup l = (ArrayLookup) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // Expression ::= ArrayLength
            {
                Exp RESULT = null;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ArrayLength l = (ArrayLength) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // Expression ::= NEW Identifier LPAREN RPAREN
            {
                Exp RESULT = null;
                int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new NewObject(i, nleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // Expression ::= THIS
            {
                Exp RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Object t = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new This(tleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Expression ::= FALSE
            {
                Exp RESULT = null;
                int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Object f = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new False(fleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // Expression ::= TRUE
            {
                Exp RESULT = null;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Object t = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new True(tleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // Expression ::= NOT Expression
            {
                Exp RESULT = null;
                int notleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int notright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object not = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int exprleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int exprright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp expr = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Not(expr, notleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // Expression ::= LPAREN Expression RPAREN
            {
                Exp RESULT = null;
                int exprleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int exprright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Exp expr = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = expr;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // Expression ::= Expression AND Expression
            {
                Exp RESULT = null;
                int arg1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int arg1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp arg1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int arg2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int arg2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp arg2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new And(arg1, arg2, arg1left);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Expression ::= Expression LT Expression
            {
                Exp RESULT = null;
                int arg1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int arg1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp arg1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int arg2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int arg2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp arg2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new LessThan(arg1, arg2, arg1left);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Expression ::= Expression TIMES Expression
            {
                Exp RESULT = null;
                int arg1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int arg1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp arg1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int arg2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int arg2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp arg2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Times(arg1, arg2, arg1left);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // Expression ::= Expression MINUS Expression
            {
                Exp RESULT = null;
                int arg1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int arg1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp arg1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int arg2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int arg2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp arg2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Minus(arg1, arg2, arg1left);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // Expression ::= Expression PLUS Expression
            {
                Exp RESULT = null;
                int arg1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int arg1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp arg1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int arg2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int arg2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Exp arg2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Plus(arg1, arg2, arg1left);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // Expression ::= IDENTIFIER
            {
                Exp RESULT = null;
                int nameleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int nameright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String name = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new IdentifierExp(name, nameleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Identifier ::= IDENTIFIER
            {
                Identifier RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Identifier(id, idleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Statement ::= LBRACE StatementList RBRACE
            {
                Statement RESULT = null;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                StatementList s = (StatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new Block(s, sleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // Statement ::= WHILE LPAREN Expression RPAREN Statement
            {
                Statement RESULT = null;
                int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int wright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Object w = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int condleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int condright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp cond = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Statement s = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new While(cond, s, wleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON
            {
                Statement RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Exp v = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new ArrayAssign(id, e, v, idleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Statement ::= SYSTEM_OUT_PRINTLN LPAREN Expression RPAREN SEMICOLON
            {
                Statement RESULT = null;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Object s = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new Print(e, sleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement
            {
                Statement RESULT = null;
                int ifKeywordleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int ifKeywordright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                Object ifKeyword = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int exprleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int exprright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Exp expr = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int thenStmtleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int thenStmtright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Statement thenStmt = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int elseStmtleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int elseStmtright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                Statement elseStmt = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new If(expr, thenStmt, elseStmt, ifKeywordleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Statement ::= Identifier BECOMES Expression SEMICOLON
            {
                Statement RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                int exprleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int exprright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Exp expr = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new Assign(id, expr, idleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // MethodDecl ::= PUBLIC Type Identifier FormalParameterListAndParens LBRACE VarDeclarationList StatementList RETURN Expression SEMICOLON RBRACE
            {
                MethodDecl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).right;
                Object p = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).value;
                int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9)).left;
                int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9)).right;
                Type t = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;
                int paramsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left;
                int paramsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).right;
                FormalList params = (FormalList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).value;
                int varsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int varsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                VarDeclList vars = (VarDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int stmtsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int stmtsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                StatementList stmts = (StatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int rvleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int rvright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Exp rv = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new MethodDecl(t, i, params, vars, stmts, rv, pleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // MethodDeclList ::= MethodDecl MethodDeclList
            {
                MethodDeclList RESULT = null;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                MethodDecl m = (MethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                MethodDeclList l = (MethodDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                l.addElement(m);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // MethodDeclList ::=
            {
                MethodDeclList RESULT = null;
                RESULT = new MethodDeclList(0);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // ClassDeclList ::= ClassDecl ClassDeclList
            {
                ClassDeclList RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                ClassDecl c = (ClassDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ClassDeclList l = (ClassDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                l.addElement(c);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // ClassDeclList ::=
            {
                ClassDeclList RESULT = null;
                RESULT = new ClassDeclList(0);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE
            {
                ClassDecl RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).value;
                int parentleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int parentright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Identifier parent = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                VarDeclList v = (VarDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                MethodDeclList m = (MethodDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new ClassDeclExtends(i, parent, v, m, ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // ClassDecl ::= CLASS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE
            {
                ClassDecl RESULT = null;
                int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
                int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
                Identifier i = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                VarDeclList v = (VarDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                MethodDeclList m = (MethodDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = new ClassDeclSimple(i, v, m, ileft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE
            {
                MainClass RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 16)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 16)).right;
                Object c = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 16)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).right;
                Identifier id = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 15)).value;
                int argsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
                int argsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
                Identifier args = (Identifier) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
                int stmtleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                int stmtright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                Statement stmt = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                RESULT = new MainClass(id, args, stmt, cleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 16)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // StatementList ::=
            {
                StatementList RESULT = null;
                RESULT = new StatementList(0);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // StatementList ::= Statement StatementList
            {
                StatementList RESULT = null;
                int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Statement s = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                StatementList l = (StatementList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = l;
                l.addElement(s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Program EOF
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Program start_val = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Program ::= MainClass ClassDeclList
            {
                Program RESULT = null;
                int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int mright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                MainClass m = (MainClass) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                ClassDeclList c = (ClassDeclList) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                RESULT = new Program(m, c, mleft);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("Program", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

